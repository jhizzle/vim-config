
snippet libs "library ieee; use ieee.std_logic_1164.all..."
library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
$0
endsnippet

snippet lib "library <lib>;"
library ${1:std};
use $1.${2:textio}.all;
$0
endsnippet

snippet simclk "simclk process..."
process
begin
  while ${1:runsim} loop
    ${2:clk} <= '1';
    wait for ${3:clk_period} / 2;
    $2 <= '0';
    wait for $3 / 2;
  end loop;
  wait;
end process;
$0
endsnippet

snippet simbody "simulation body process..."
process
begin
  wait for ${1:clk_period} * 1 / 4;

  wait for clk_period * 10;
  ${2:runsim} <= false;
  wait;
end process;
$0
endsnippet

snippet simtb "Simulation testbench"
--******************************************************************************
--
--  COPYRIGHT NOTICE
--
--  (C) Copyright 2015 - 2019 Idaho Scientific, LLC. All right reserved.
--
--  This file contains confidential and proprietary information
--  of Idaho Scientific, LLC. and is protected under U.S. and
--  international copyright and other intellectual property
--  laws.
--
--  This copyright notice is not a license and does not grant
--  any rights to the materials distributed herewith. Please contact
--  Idaho Scientific for any license inquires.
--
--  THIS COPYRIGHT NOTICE MUST BE RETAINED AS PART OF THIS FILE AT ALL TIMES.
--
--******************************************************************************

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

library idahoscientific_lib;
use idahoscientific_lib.std_pkg.all;
use idahoscientific_lib.std_sim_pkg.all;

entity ${1:widget}_tb is
  generic (
    CLK_PERIOD_G : time := 10 ns;
  );
end entity $1_tb;

architecture sim of $1_tb is

  signal runsim : boolean := true;

  procedure tick(count : in natural := 1) is
  begin
    for i in 1 to count loop
      wait until rising_edge(clk);
    end loop;
  end procedure;

begin

  p_clk_proc: process
  begin
    while runsim loop
      clk <= '0';
      wait for CLK_PERIOD_G / 2;
      clk <= '1';
      wait for CLK_PERIOD_G / 2;
    end loop;
    wait;
  end process;


  i_uut: entity work.$1
  $0


  p_main_sim: process
  begin
    wait for 200 ns; -- wait for at least 100ns for GSR
    tick;

    tick(10);
    runsim <= false;
    wait;
  end process;

end architecture;
endsnippet


snippet entity "entity <entityname>..."
--******************************************************************************
--
--  COPYRIGHT NOTICE
--
--  (C) Copyright 2015 - 2019 Idaho Scientific, LLC. All right reserved.
--
--  This file contains confidential and proprietary information
--  of Idaho Scientific, LLC. and is protected under U.S. and
--  international copyright and other intellectual property
--  laws.
--
--  This copyright notice is not a license and does not grant
--  any rights to the materials distributed herewith. Please contact
--  Idaho Scientific for any license inquires.
--
--  THIS COPYRIGHT NOTICE MUST BE RETAINED AS PART OF THIS FILE AT ALL TIMES.
--
--******************************************************************************


library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

entity ${1:widget} is
  generic (
    ${2}
  );
  port (
    ${3}
  );
end entity $1;

architecture ${4:rtl} of $1 is
  type state_t is (${0});

  type reg_t is
    record
      state : state_t;
    end record;

  signal r, rin : reg_t;
begin

  p_comb: process (
    r
  ) is
    variable v : reg_t;
  begin
    v := r;

    rin <= v;
  end process;


  p_sync: process (clk) is
  begin
    if rising_edge(clk) then
      r <= rin;
    end if;
  end process;

end architecture;
endsnippet

snippet if "if .. then ... end if"
if (${1:true}) then
  ${VISUAL}$0
end if;
endsnippet

snippet elsif "if .. then ... end if"
elsif (${1:true}) then
  ${VISUAL}
endsnippet

snippet proclk "process (clk)..."
p_${2:process_name}: process (${1:clk})
begin
  if rising_edge($1) then
    if (${3:rst_n = '0'}) then
      ${4:-- reset}
    else
      ${VISUAL:-- normal ops}
      $0
    end if;
  end if;
end process;
endsnippet

snippet sl "std_logic"
std_logic
endsnippet

snippet slv "std_logic_vector(N downto M)"
std_logic_vector(${1:32} ${2:downto} ${3:0})
endsnippet

snippet axim "Master AXI interface"
-- AXI master
aclk : in std_logic;
aresetn : in std_logic;
awid : out std_logic_vector(AXI_ID_WIDTH_G - 1 downto 0);
awvalid : out std_logic;
awready : in std_logic;
awaddr : out std_logic_vector(AXI_ADDR_WIDTH_G - 1 downto 0);
awlen : out std_logic_vector(7 downto 0);
awsize : out std_logic_vector(2 downto 0);
awburst : out std_logic_vector(1 downto 0);
awlock : out std_logic_vector(0 downto 0);
awcache : out std_logic_vector(3 downto 0);
awprot : out std_logic_vector(2 downto 0);
wvalid : out std_logic;
wready : in std_logic;
wdata : out std_logic_vector(AXI_DATA_WIDTH_G - 1 downto 0);
wstrb : out std_logic_vector((AXI_DATA_WIDTH_G / 8) - 1 downto 0);
wlast : out std_logic;
bid : in std_logic_vector(AXI_ID_WIDTH_G - 1 downto 0);
bvalid : in std_logic;
bready : out std_logic;
bresp : in std_logic_vector(1 downto 0);
arid : out std_logic_vector(AXI_ID_WIDTH_G - 1 downto 0);
arvalid : out std_logic;
arready : in std_logic;
araddr : out std_logic_vector(AXI_ADDR_WIDTH_G - 1 downto 0);
arlen : out std_logic_vector(7 downto 0);
arsize : out std_logic_vector(2 downto 0);
arburst : out std_logic_vector(1 downto 0);
arlock : out std_logic_vector(0 downto 0);
arcache : out std_logic_vector(3 downto 0);
arprot : out std_logic_vector(2 downto 0);
rid : in std_logic_vector(AXI_ID_WIDTH_G - 1 downto 0);
rvalid : in std_logic;
rready : out std_logic;
rdata : in std_logic_vector(AXI_DATA_WIDTH_G - 1 downto 0);
rlast : in std_logic;
rresp : in std_logic_vector(1 downto 0);
endsnippet

snippet axis "Slave AXI interface"
-- AXI slave
aclk : in std_logic;
aresetn : in std_logic;
awid : in std_logic_vector(AXI_ID_WIDTH_G - 1 downto 0);
awvalid : in std_logic;
awready : out std_logic;
awaddr : in std_logic_vector(AXI_ADDR_WIDTH_G - 1 downto 0);
awlen : in std_logic_vector(7 downto 0);
awsize : in std_logic_vector(2 downto 0);
awburst : in std_logic_vector(1 downto 0);
awlock : in std_logic_vector(0 downto 0);
awcache : in std_logic_vector(3 downto 0);
awprot : in std_logic_vector(2 downto 0);
wvalid : in std_logic;
wready : out std_logic;
wdata : in std_logic_vector(AXI_DATA_WIDTH_G - 1 downto 0);
wstrb : in std_logic_vector((AXI_DATA_WIDTH_G / 8) - 1 downto 0);
wlast : in std_logic;
bid : out std_logic_vector(AXI_ID_WIDTH_G - 1 downto 0);
bvalid : out std_logic;
bready : in std_logic;
bresp : out std_logic_vector(1 downto 0);
arid : in std_logic_vector(AXI_ID_WIDTH_G - 1 downto 0);
arvalid : in std_logic;
arready : out std_logic;
araddr : in std_logic_vector(AXI_ADDR_WIDTH_G - 1 downto 0);
arlen : in std_logic_vector(7 downto 0);
arsize : in std_logic_vector(2 downto 0);
arburst : in std_logic_vector(1 downto 0);
arlock : in std_logic_vector(0 downto 0);
arcache : in std_logic_vector(3 downto 0);
arprot : in std_logic_vector(2 downto 0);
rid : out std_logic_vector(AXI_ID_WIDTH_G - 1 downto 0);
rvalid : out std_logic;
rready : in std_logic;
rdata : out std_logic_vector(AXI_DATA_WIDTH_G - 1 downto 0);
rlast : out std_logic;
rresp : out std_logic_vector(1 downto 0);
endsnippet

snippet aximlite "Master AXI-Lite interface"
-- AXI-lite master
aclk : in std_logic;
aresetn : in std_logic;
awvalid : out std_logic;
awready : in std_logic;
awaddr : out std_logic_vector(AXI_ADDR_WIDTH_G - 1 downto 0);
awprot : out std_logic_vector(2 downto 0);
wvalid : out std_logic;
wready : in std_logic;
wdata : out std_logic_vector(AXI_DATA_WIDTH_G - 1 downto 0);
wstrb : out std_logic_vector((AXI_DATA_WIDTH_G / 8) - 1 downto 0);
bvalid : in std_logic;
bready : out std_logic;
bresp : in std_logic_vector(1 downto 0);
arvalid : out std_logic;
arready : in std_logic;
araddr : out std_logic_vector(AXI_ADDR_WIDTH_G - 1 downto 0);
arprot : out std_logic_vector(2 downto 0);
rvalid : in std_logic;
rready : out std_logic;
rdata : in std_logic_vector(AXI_DATA_WIDTH_G - 1 downto 0);
rresp : in std_logic_vector(1 downto 0);
endsnippet


snippet axislite "Slave AXI-Lite interface"
-- AXI-lite slave
aclk : in std_logic;
aresetn : in std_logic;
awvalid : in std_logic;
awready : out std_logic;
awaddr : in std_logic_vector(AXI_ADDR_WIDTH_G - 1 downto 0);
awprot : in std_logic_vector(2 downto 0);
wvalid : in std_logic;
wready : out std_logic;
wdata : in std_logic_vector(AXI_DATA_WIDTH_G - 1 downto 0);
wstrb : in std_logic_vector((AXI_DATA_WIDTH_G / 8) - 1 downto 0);
bvalid : out std_logic;
bready : in std_logic;
bresp : out std_logic_vector(1 downto 0);
arvalid : in std_logic;
arready : out std_logic;
araddr : in std_logic_vector(AXI_ADDR_WIDTH_G - 1 downto 0);
arprot : in std_logic_vector(2 downto 0);
rvalid : out std_logic;
rready : in std_logic;
rdata : out std_logic_vector(AXI_DATA_WIDTH_G - 1 downto 0);
rresp : out std_logic_vector(1 downto 0);
endsnippet


snippet statemachinemoore "Moore style state machine"
-- signals
type state_type is (${1:states});

--Insert the following in the architecture before the begin keyword
  --Use descriptive names for the states, like st1_reset, st2_search
  type state_type is (${1:st1_<name_state>, st2_<name_state>, ...});
  signal state, next_state : state_type;
  --Declare internal signals for all outputs of the state-machine
  signal <output>_i : std_logic;  -- example output signal
  $0
  --other outputs

--Insert the following in the architecture after the begin keyword

SYNC_PROC: process(${2:clk})
begin
  if ($2'event and $2 = '1') then
    if (${3:rst_n} = '0') then
      state <= st1_<name_state>;
      <output> <= '0';
    else
      state <= next_state;
      <output> <= <output>_i;
      -- assign other outputs to internal signals
    end if;
  end if;
end process;

--MOORE State-Machine - Outputs based on state only
OUTPUT_DECODE: process (state)
begin
  --insert statements to decode internal output signals
  --below is simple example
  if state = st3_<name> then
    <output>_i <= '1';
  else
    <output>_i <= '0';
  end if;
end process;

NEXT_STATE_DECODE: process (state, <input1>, <input2>, ...)
begin
  --declare default state for next_state to avoid latches
  next_state <= state;  --default is to stay in current state
  --insert statements to decode next_state
  --below is a simple example
  case (state) is
    when st1_<name> =>
      if <input_1> = '1' then
        next_state <= st2_<name>;
      end if;
    when st2_<name> =>
      if <input_2> = '1' then
        next_state <= st3_<name>;
      end if;
    when st3_<name> =>
      next_state <= st1_<name>;
    when others =>
      next_state <= st1_<name>;
  end case;
end process;
endsnippet

snippet statemachinemealy "Mealy style state machine"

-- This is a sample state-machine using enumerated types.
-- This will allow the synthesis tool to select the appropriate
-- encoding style and will make the code more readable.

--Insert the following in the architecture before the begin keyword
  --Use descriptive names for the states, like st1_reset, st2_search
  type state_type is (st1_<name_state>, st2_<name_state>, ...);
  signal state, next_state : state_type;
  --Declare internal signals for all outputs of the state-machine
  signal <output>_i : std_logic;  -- example output signal
  --other outputs

--Insert the following in the architecture after the begin keyword
  SYNC_PROC: process (${1:clk})
  begin
    if ($1'event and $1 = '1') then
      if (${2:rst_n = '0'}) then
        state <= st1_<name_state>;
        <output> <= '0';
      else
        state <= next_state;
        <output> <= <output>_i;
      -- assign other outputs to internal signals
      end if;
    end if;
  end process;

  --MEALY State-Machine - Outputs based on state and inputs
  OUTPUT_DECODE: process (state, <input1>, <input2>, ...)
  begin
    --insert statements to decode internal output signals
    --below is simple example
    if (state = st3_<name> and <input1> = '1') then
      <output>_i <= '1';
    else
      <output>_i <= '0';
    end if;
  end process;

  NEXT_STATE_DECODE: process (state, <input1>, <input2>, ...)
  begin
    --declare default state for next_state to avoid latches
    next_state <= state;  --default is to stay in current state
    --insert statements to decode next_state
    --below is a simple example
    case (state) is
      when st1_<name> =>
        if <input_1> = '1' then
          next_state <= st2_<name>;
        end if;
      when st2_<name> =>
        if <input_2> = '1' then
          next_state <= st3_<name>;
        end if;
      when st3_<name> =>
        next_state <= st1_<name>;
      when others =>
        next_state <= st1_<name>;
    end case;
  end process;
endsnippet


snippet axistream "AXI Stream interface"
s_tvalid : in std_logic;
s_tready : out std_logic;
s_tdata : in std_logic_vector(AXIS_DATA_WIDTH_G - 1 downto 0);
s_tstrb : in std_logic_vector((AXIS_DATA_WIDTH_G / 8) - 1 downto 0);
s_tkeep : in std_logic_vector((AXIS_DATA_WIDTH_G / 8) - 1 downto 0);
s_tlast : in std_logic;
m_tvalid : out std_logic;
m_tready : in std_logic;
m_tdata : out std_logic_vector(AXIS_DATA_WIDTH_G - 1 downto 0);
m_tstrb : out std_logic_vector((AXIS_DATA_WIDTH_G / 8) - 1 downto 0);
m_tkeep : out std_logic_vector((AXIS_DATA_WIDTH_G / 8) - 1 downto 0);
m_tlast : out std_logic;
endsnippet

